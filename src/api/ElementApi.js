/**
 * DataHub API
 * DataHub API
 *
 * OpenAPI spec version: 0.0.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GeneralStatus', 'model/DataElement'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GeneralStatus'), require('../model/DataElement'));
  } else {
    // Browser globals (root is window)
    if (!root.DataHubApi) {
      root.DataHubApi = {};
    }
    root.DataHubApi.ElementApi = factory(root.DataHubApi.ApiClient, root.DataHubApi.GeneralStatus, root.DataHubApi.DataElement);
  }
}(this, function(ApiClient, GeneralStatus, DataElement) {
  'use strict';

  /**
   * Element service.
   * @module api/ElementApi
   * @version 0.0.12
   */

  /**
   * Constructs a new ElementApi. 
   * @alias module:api/ElementApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addElement operation.
     * @callback module:api/ElementApi~addElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new open element
     * This creates a new element in a release in a data set. The element defaults to the open (and therefore unpublished) state. 
     * @param {String} apiKey The user api key
     * @param {String} releasecode The code of the release this element is associated with
     * @param {module:model/DataElement} body Element object that defines the element in a data set
     * @param {module:api/ElementApi~addElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralStatus}
     */
    this.addElement = function(apiKey, releasecode, body, callback) {
      var postBody = body;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling addElement";
      }

      // verify the required parameter 'releasecode' is set
      if (releasecode == undefined || releasecode == null) {
        throw "Missing the required parameter 'releasecode' when calling addElement";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling addElement";
      }


      var pathParams = {
        'releasecode': releasecode
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralStatus;

      return this.apiClient.callApi(
        '/element/{elementcode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteElement operation.
     * @callback module:api/ElementApi~deleteElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete element information
     * This removes an element 
     * @param {String} apiKey The user api key
     * @param {String} elementcode The code of the element
     * @param {module:api/ElementApi~deleteElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralStatus}
     */
    this.deleteElement = function(apiKey, elementcode, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling deleteElement";
      }

      // verify the required parameter 'elementcode' is set
      if (elementcode == undefined || elementcode == null) {
        throw "Missing the required parameter 'elementcode' when calling deleteElement";
      }


      var pathParams = {
        'elementcode': elementcode
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GeneralStatus;

      return this.apiClient.callApi(
        '/element/{elementcode}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElement operation.
     * @callback module:api/ElementApi~getElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get element information
     * This returns information about an element 
     * @param {String} apiKey The user api key
     * @param {String} elementcode The code of the element
     * @param {module:api/ElementApi~getElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataElement}
     */
    this.getElement = function(apiKey, elementcode, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling getElement";
      }

      // verify the required parameter 'elementcode' is set
      if (elementcode == undefined || elementcode == null) {
        throw "Missing the required parameter 'elementcode' when calling getElement";
      }


      var pathParams = {
        'elementcode': elementcode
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataElement;

      return this.apiClient.callApi(
        '/element/{elementcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getElements operation.
     * @callback module:api/ElementApi~getElementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataElement>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get elements for this release
     * Get elements for this release
     * @param {String} apiKey The user api key
     * @param {String} releasecode The code of the release this element is associated with
     * @param {module:api/ElementApi~getElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataElement>}
     */
    this.getElements = function(apiKey, releasecode, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling getElements";
      }

      // verify the required parameter 'releasecode' is set
      if (releasecode == undefined || releasecode == null) {
        throw "Missing the required parameter 'releasecode' when calling getElements";
      }


      var pathParams = {
        'releasecode': releasecode
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DataElement];

      return this.apiClient.callApi(
        '/elements/{releasecode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateElement operation.
     * @callback module:api/ElementApi~updateElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an element
     * Updates an element
     * @param {String} apiKey The user api key
     * @param {String} elementcode The code of the element
     * @param {module:model/DataElement} body The updated element
     * @param {module:api/ElementApi~updateElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataElement}
     */
    this.updateElement = function(apiKey, elementcode, body, callback) {
      var postBody = body;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling updateElement";
      }

      // verify the required parameter 'elementcode' is set
      if (elementcode == undefined || elementcode == null) {
        throw "Missing the required parameter 'elementcode' when calling updateElement";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateElement";
      }


      var pathParams = {
        'elementcode': elementcode
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataElement;

      return this.apiClient.callApi(
        '/element/{elementcode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
