/**
 * DataHub API
 * DataHub API
 *
 * OpenAPI spec version: 0.0.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Subscription', 'model/RepositoryView'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Subscription'), require('../model/RepositoryView'));
  } else {
    // Browser globals (root is window)
    if (!root.DataHubApi) {
      root.DataHubApi = {};
    }
    root.DataHubApi.SubscriptionApi = factory(root.DataHubApi.ApiClient, root.DataHubApi.Subscription, root.DataHubApi.RepositoryView);
  }
}(this, function(ApiClient, Subscription, RepositoryView) {
  'use strict';

  /**
   * Subscription service.
   * @module api/SubscriptionApi
   * @version 0.0.12
   */

  /**
   * Constructs a new SubscriptionApi. 
   * @alias module:api/SubscriptionApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSubscription operation.
     * @callback module:api/SubscriptionApi~createSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new subscription
     * This is an admin api call that creates a subscription between a user and a repository
     * @param {String} adminKey The admin key for the environment
     * @param {String} repocode The repocode that this subscription relates to
     * @param {String} usercode The usercode (shortcode) of the user that is the beneficiary of the subscription
     * @param {module:model/Subscription} body A new subscription
     * @param {module:api/SubscriptionApi~createSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createSubscription = function(adminKey, repocode, usercode, body, callback) {
      var postBody = body;

      // verify the required parameter 'adminKey' is set
      if (adminKey == undefined || adminKey == null) {
        throw "Missing the required parameter 'adminKey' when calling createSubscription";
      }

      // verify the required parameter 'repocode' is set
      if (repocode == undefined || repocode == null) {
        throw "Missing the required parameter 'repocode' when calling createSubscription";
      }

      // verify the required parameter 'usercode' is set
      if (usercode == undefined || usercode == null) {
        throw "Missing the required parameter 'usercode' when calling createSubscription";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createSubscription";
      }


      var pathParams = {
        'repocode': repocode,
        'usercode': usercode
      };
      var queryParams = {
      };
      var headerParams = {
        'admin_key': adminKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subscription/{repocode}/{usercode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserSubscriptions operation.
     * @callback module:api/SubscriptionApi~getUserSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepositoryView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the repositories that the current user is subscribed to
     * Retrieves the repositories a user is subscribed to
     * @param {String} apiKey The user api key
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.skip The amount of records to skip
     * @param {Integer} opts.limit The maximum amount of records to be returned (the size of the page)
     * @param {module:api/SubscriptionApi~getUserSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepositoryView>}
     */
    this.getUserSubscriptions = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling getUserSubscriptions";
      }


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RepositoryView];

      return this.apiClient.callApi(
        '/subs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
