/**
 * DataHub API
 * DataHub API
 *
 * OpenAPI spec version: 0.0.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UserProfile', 'model/UserStripe', 'model/UserTokens'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./UserProfile'), require('./UserStripe'), require('./UserTokens'));
  } else {
    // Browser globals (root is window)
    if (!root.DataHubApi) {
      root.DataHubApi = {};
    }
    root.DataHubApi.User = factory(root.DataHubApi.ApiClient, root.DataHubApi.UserProfile, root.DataHubApi.UserStripe, root.DataHubApi.UserTokens);
  }
}(this, function(ApiClient, UserProfile, UserStripe, UserTokens) {
  'use strict';




  /**
   * The User model module.
   * @module model/User
   * @version 0.0.12
   */

  /**
   * Constructs a new <code>User</code>.
   * @alias module:model/User
   * @class
   */
  var exports = function() {
    var _this = this;




















  };

  /**
   * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/User} obj Optional instance to populate.
   * @return {module:model/User} The populated <code>User</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('code')) {
        obj['code'] = ApiClient.convertToType(data['code'], 'String');
      }
      if (data.hasOwnProperty('accountType')) {
        obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
      }
      if (data.hasOwnProperty('accountStatus')) {
        obj['accountStatus'] = ApiClient.convertToType(data['accountStatus'], 'String');
      }
      if (data.hasOwnProperty('group')) {
        obj['group'] = ApiClient.convertToType(data['group'], 'Boolean');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('gravatar')) {
        obj['gravatar'] = ApiClient.convertToType(data['gravatar'], 'String');
      }
      if (data.hasOwnProperty('apiKey')) {
        obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
      }
      if (data.hasOwnProperty('password')) {
        obj['password'] = ApiClient.convertToType(data['password'], 'String');
      }
      if (data.hasOwnProperty('passwordResetToken')) {
        obj['passwordResetToken'] = ApiClient.convertToType(data['passwordResetToken'], 'String');
      }
      if (data.hasOwnProperty('passwordResetExpires')) {
        obj['passwordResetExpires'] = ApiClient.convertToType(data['passwordResetExpires'], 'Date');
      }
      if (data.hasOwnProperty('twitter')) {
        obj['twitter'] = ApiClient.convertToType(data['twitter'], 'String');
      }
      if (data.hasOwnProperty('google')) {
        obj['google'] = ApiClient.convertToType(data['google'], 'String');
      }
      if (data.hasOwnProperty('github')) {
        obj['github'] = ApiClient.convertToType(data['github'], 'String');
      }
      if (data.hasOwnProperty('linkedin')) {
        obj['linkedin'] = ApiClient.convertToType(data['linkedin'], 'String');
      }
      if (data.hasOwnProperty('tokens')) {
        obj['tokens'] = ApiClient.convertToType(data['tokens'], [UserTokens]);
      }
      if (data.hasOwnProperty('stripe')) {
        obj['stripe'] = UserStripe.constructFromObject(data['stripe']);
      }
      if (data.hasOwnProperty('profile')) {
        obj['profile'] = UserProfile.constructFromObject(data['profile']);
      }
    }
    return obj;
  }

  /**
   * The id is the unique key for a user and is normally set to be the email of the user
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The code is the unique (upper case) string used for referencing datasets. Short codes (three chars or less are premium)
   * @member {String} code
   */
  exports.prototype['code'] = undefined;
  /**
   * The type of account this is. Basic = free, Bronze, Silver, Gold, Platinum.
   * @member {String} accountType
   */
  exports.prototype['accountType'] = undefined;
  /**
   * Is the account in good standing? If this is non blank then the account will act as basic and no subscribed datasets will work
   * @member {String} accountStatus
   */
  exports.prototype['accountStatus'] = undefined;
  /**
   * Whether this entry is for a group or not.
   * @member {Boolean} group
   */
  exports.prototype['group'] = undefined;
  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * @member {String} gravatar
   */
  exports.prototype['gravatar'] = undefined;
  /**
   * The api key that can be used to impersonate this user
   * @member {String} apiKey
   */
  exports.prototype['apiKey'] = undefined;
  /**
   * @member {String} password
   */
  exports.prototype['password'] = undefined;
  /**
   * @member {String} passwordResetToken
   */
  exports.prototype['passwordResetToken'] = undefined;
  /**
   * @member {Date} passwordResetExpires
   */
  exports.prototype['passwordResetExpires'] = undefined;
  /**
   * @member {String} twitter
   */
  exports.prototype['twitter'] = undefined;
  /**
   * @member {String} google
   */
  exports.prototype['google'] = undefined;
  /**
   * @member {String} github
   */
  exports.prototype['github'] = undefined;
  /**
   * @member {String} linkedin
   */
  exports.prototype['linkedin'] = undefined;
  /**
   * @member {Array.<module:model/UserTokens>} tokens
   */
  exports.prototype['tokens'] = undefined;
  /**
   * @member {module:model/UserStripe} stripe
   */
  exports.prototype['stripe'] = undefined;
  /**
   * @member {module:model/UserProfile} profile
   */
  exports.prototype['profile'] = undefined;



  return exports;
}));


